import requests
import time
import json
import os
import re
import telebot
import random
import string
from keep_alive import keep_alive

TOKEN = "7905547591:AAEivoneinmUDRtg7hvBkGPEPPAegMC36uc"
CHAT_ID = "5292727929"
bot = telebot.TeleBot(TOKEN)

OWNER_ID = 5292727929
authorized_users = {OWNER_ID}
valid_keys = set()
waiting_for_key = {}

SEARCH_INTERVAL = 60

def generate_key():
    key = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    valid_keys.add(key)
    return key

def normalize_title(title):
    return re.sub(r"\s+", " ", title.lower())

def is_good_ad(title, description, price):
    bad_keywords = ["–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "—Ä–µ—Ñ", "—Ä–µ—Ñ–∞–±", "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", "–±–∏—Ç—ã–π", "–ø–µ—Ä–µ–∫—É–ø", "–ø—Ä–æ–±–ª–µ–º–∞", "—Ç—Ä–µ—Å–Ω—É—Ç", "—Å–∫–æ–ª", "—Ä–∞–∑–±–∏—Ç"]
    good_keywords = ["–∏–¥–µ–∞–ª", "–≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "100% –∞–∫–±", "–±–µ–∑ —Ü–∞—Ä–∞–ø–∏–Ω", "–Ω–µ –≤—Å–∫—Ä—ã–≤–∞–ª—Å—è", "–æ—Ä–∏–≥–∏–Ω–∞–ª", "–≤—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"]
    full_text = f"{title} {description}".lower()

    if any(bad in full_text for bad in bad_keywords):
        return False
    if not any(good in full_text for good in good_keywords):
        return False
    return True

def check_for_new_ads(urls):
    headers = {"User-Agent": "Mozilla/5.0"}
    found_ads = []

    for url in urls:
        try:
            response = requests.get(url, headers=headers, timeout=10)
            if response.ok:
                matches = re.findall(r'{\"id\":\d+.*?}', response.text)
                for match in matches:
                    try:
                        ad = json.loads(match)
                        title = ad.get("title", "")
                        desc = ad.get("description", "")
                        price = int(ad.get("price", 0))
                        link = f"https://www.avito.ru{ad.get('url', '')}"
                        if is_good_ad(title, desc, price):
                            found_ads.append(f"üì± {title}\nüí∞ {price}‚ÇΩ\nüîó {link}")
                    except:
                        continue
        except:
            continue
    return found_ads

@bot.message_handler(commands=["start"])
def start_cmd(msg):
    bot.send_message(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /monitor <—Å—Å—ã–ª–∫–∏> –¥–ª—è –Ω–∞—á–∞–ª–∞. –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –≤–≤–µ–¥–∏ –∫–ª—é—á.")

@bot.message_handler(commands=["genkey"])
def genkey_cmd(msg):
    if msg.from_user.id == OWNER_ID:
        key = generate_key()
        bot.send_message(msg.chat.id, f"üîë –¢–≤–æ–π –∫–ª—é—á: `{key}`", parse_mode="Markdown")
    else:
        bot.send_message(msg.chat.id, "‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")

@bot.message_handler(commands=["monitor"])
def monitor_cmd(msg):
    uid = msg.from_user.id
    if uid in authorized_users:
        urls = msg.text.split()[1:]
        if not urls:
            bot.send_message(msg.chat.id, "‚ùó –£–∫–∞–∂–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
            return
        ads = check_for_new_ads(urls)
        if ads:
            for ad in ads:
                bot.send_message(msg.chat.id, ad)
        else:
            bot.send_message(msg.chat.id, "üîç –û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        bot.send_message(msg.chat.id, "üîê –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:")
        waiting_for_key[uid] = True

@bot.message_handler(func=lambda m: True)
def handle_text(msg):
    uid = msg.from_user.id
    if uid in waiting_for_key:
        if msg.text.strip().upper() in valid_keys:
            authorized_users.add(uid)
            del waiting_for_key[uid]
            bot.send_message(msg.chat.id, "‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π /monitor <—Å—Å—ã–ª–∫–∏>.")
        else:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")

keep_alive()
bot.polling(none_stop=True)
